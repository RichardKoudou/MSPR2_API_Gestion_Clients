name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      NODE_ENV: test
      PORT: ${{ secrets.PORT }}
      APP_KEY: ${{ secrets.APP_KEY }}
      HOST: ${{ secrets.HOST }}
      LOG_LEVEL: info
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ secrets.DB_DATABASE }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        options: >
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run migrations
        run: node ace migration:run

      - name: Run tests
        run: npm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
